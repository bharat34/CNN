{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"IntelImageClassificatin","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyPzSQZI8Pz17K9DDyErbuFn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"GgtKhQ63SGM6","colab_type":"code","colab":{}},"source":["from google.colab import files"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VLxo59v9exfW","colab_type":"code","colab":{}},"source":["!pip install -q kaggle"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1uYqJfS5ezp2","colab_type":"code","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":74},"outputId":"565c090f-50ca-40c6-e4fc-5042148a5617","executionInfo":{"status":"ok","timestamp":1580701186917,"user_tz":480,"elapsed":6242,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["uploaded = files.upload()"],"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-1945e90c-daea-4fd7-bbe0-ef9af6b3ebe7\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-1945e90c-daea-4fd7-bbe0-ef9af6b3ebe7\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving kaggle.json to kaggle.json\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LVNJLmNbIlSq","colab_type":"code","colab":{}},"source":["!cp kaggle.json /root/.kaggle/kaggle.json"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2yrHPF02Iq4Z","colab_type":"code","colab":{}},"source":["!chmod 600 /root/.kaggle/kaggle.json"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vnjvWnV2fqcV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":67},"outputId":"1720326e-08c5-4a80-e1f9-d3bee1ab5c3f","executionInfo":{"status":"ok","timestamp":1580701243525,"user_tz":480,"elapsed":6694,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["!kaggle datasets download -d puneet6060/intel-image-classification"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Downloading intel-image-classification.zip to /content\n"," 99% 342M/346M [00:04<00:00, 62.3MB/s]\n","100% 346M/346M [00:04<00:00, 77.6MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_nB2WdVM2L5V","colab_type":"code","colab":{}},"source":["from zipfile import ZipFile\n","with ZipFile('intel-image-classification.zip', 'r') as zipObj:\n","   # Extract all the contents of zip file in current directory\n","   zipObj.extractall()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yW2KMCOx2QuU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"outputId":"34573e63-d5d8-4306-d6ac-c2750249f945","executionInfo":{"status":"ok","timestamp":1580701251572,"user_tz":480,"elapsed":6936,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["!ls"],"execution_count":11,"outputs":[{"output_type":"stream","text":["intel-image-classification.zip\tsample_data  seg_test\n","kaggle.json\t\t\tseg_pred     seg_train\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Zz7ne9Qn2Xfn","colab_type":"code","colab":{}},"source":["!mkdir intel-image-classification"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zAtWVXBt7F0W","colab_type":"code","colab":{}},"source":["!mv seg_pred/ intel-image-classification/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZJgsJgpa7KDu","colab_type":"code","colab":{}},"source":["!mv seg_test/ intel-image-classification/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PjuZKa_U7Mef","colab_type":"code","colab":{}},"source":["!mv seg_train/ intel-image-classification/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pj7Ts_oa7PS_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"ae2a229f-2e35-4f3d-fa15-6cf82cd8a63b","executionInfo":{"status":"ok","timestamp":1580701256375,"user_tz":480,"elapsed":2438,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["!pwd"],"execution_count":16,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"B1HVXo-dFT-t","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"outputId":"fa80f2e8-a7de-449e-9376-0e048af450e8","executionInfo":{"status":"ok","timestamp":1580701264178,"user_tz":480,"elapsed":995,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["!ls"],"execution_count":17,"outputs":[{"output_type":"stream","text":["intel-image-classification\tkaggle.json\n","intel-image-classification.zip\tsample_data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t8sM2xiIFwiS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"outputId":"fef5cf13-68db-41b2-cd85-7fc13db58eea","executionInfo":{"status":"ok","timestamp":1580701786039,"user_tz":480,"elapsed":520755,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iSjiQyrNFx9k","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":62},"outputId":"4b606885-9c0b-409d-af46-c019da5e91d2","executionInfo":{"status":"ok","timestamp":1580704736486,"user_tz":480,"elapsed":6143,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["import math\n","import numpy as np\n","import h5py\n","import matplotlib.pyplot as plt\n","import scipy\n","from PIL import Image\n","from scipy import ndimage\n","import tensorflow as tf\n","from tensorflow.python.framework import ops\n","\n","%matplotlib inline\n","np.random.seed(1)"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"zYD5FD3sG1Is","colab_type":"code","colab":{}},"source":["import imageio\n","def load_image(infilename) :\n","    img = Image.open(infilename )\n","    img.load()\n","    #print(np.array(ndimage.imread(infilename, flatten=False)).shape)\n","    #data = np.array(ndimage.imread(infilename, flatten=False))\n","    data = np.array(imageio.imread(infilename))\n","    #assert data.shape[0] == 150,infilename\n","    return data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bkFkaYYCG3_T","colab_type":"code","colab":{}},"source":["X_train=np.zeros((13986,150,150,3))\n","Y_train_orig=np.zeros((1,13986),dtype=int)\n","X_test=np.zeros((2993,150,150,3))\n","Y_test_orig=np.zeros((1,2993),dtype=int)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EDLj8ZRQFCR8","colab_type":"code","outputId":"98957275-eca7-46e2-b90f-85ed05c90c0c","executionInfo":{"status":"ok","timestamp":1580704779480,"user_tz":480,"elapsed":46019,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}},"colab":{"base_uri":"https://localhost:8080/","height":218}},"source":["import os\n","from os import listdir\n","from os.path import isfile, join\n","trainingDir=\"/content/intel-image-classification/seg_train/seg_train\"\n","testDir=\"/content/intel-image-classification/seg_test/seg_test\"\n","subFolder=[\"buildings\",\"forest\",\"glacier\",\"mountain\",\"sea\",\"street\"]\n","xTrainImageNumber=0\n","xTestImageNumber=0\n","yObjectId=0\n","for subfolder in subFolder:\n","    try:\n","        # Change the current working Directory \n","        os.chdir(trainingDir+\"/\"+subfolder)\n","        mypath=trainingDir+\"/\"+subfolder\n","        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n","        for image in onlyfiles:\n","            data=load_image(image)\n","            if data.shape[0]==150:\n","              X_train[xTrainImageNumber]=data\n","              Y_train_orig[:,xTrainImageNumber]=yObjectId\n","              xTrainImageNumber+=1\n","        print(subfolder,\"Directory changed\")\n","        \n","        os.chdir(testDir+\"/\"+subfolder)\n","        mypath=testDir+\"/\"+subfolder\n","        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n","        for image in onlyfiles:\n","            data=load_image(image)\n","            if data.shape[0]==150:\n","              X_test[xTestImageNumber]=data\n","              Y_test_orig[:,xTestImageNumber]=yObjectId\n","              xTestImageNumber+=1\n","        print(subfolder,\"Directory changed\")\n","    except OSError:\n","        print(\"Can't change the Current Working Directory\")\n","    yObjectId+=1"],"execution_count":4,"outputs":[{"output_type":"stream","text":["buildings Directory changed\n","buildings Directory changed\n","forest Directory changed\n","forest Directory changed\n","glacier Directory changed\n","glacier Directory changed\n","mountain Directory changed\n","mountain Directory changed\n","sea Directory changed\n","sea Directory changed\n","street Directory changed\n","street Directory changed\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TnV5LkncHp6X","colab_type":"code","colab":{}},"source":["def convert_to_one_hot(Y, C):\n","    Y = np.eye(C)[Y.reshape(-1)].T\n","    return Y"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BtG7xVpOMjTb","colab_type":"code","colab":{}},"source":["X_train = X_train/255.\n","X_test = X_test/255.\n","Y_train = convert_to_one_hot(Y_train_orig, 6).T\n","Y_test = convert_to_one_hot(Y_test_orig, 6).T"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"--KxYuFjLQOd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":118},"outputId":"fbcad32b-84f7-45f7-a922-c98c53000d77","executionInfo":{"status":"ok","timestamp":1580704783535,"user_tz":480,"elapsed":47568,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["print (\"number of training examples = \" + str(X_train.shape[0]))\n","print (\"number of test examples = \" + str(X_test.shape[0]))\n","print (\"X_train shape: \" + str(X_train.shape))\n","print (\"Y_train shape: \" + str(Y_train.shape))\n","print (\"X_test shape: \" + str(X_test.shape))\n","print (\"Y_test shape: \" + str(Y_test.shape))\n","conv_layers = {}"],"execution_count":7,"outputs":[{"output_type":"stream","text":["number of training examples = 13986\n","number of test examples = 2993\n","X_train shape: (13986, 150, 150, 3)\n","Y_train shape: (13986, 6)\n","X_test shape: (2993, 150, 150, 3)\n","Y_test shape: (2993, 6)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CWqRpfReNxVU","colab_type":"code","colab":{}},"source":["def random_mini_batches(X, Y, mini_batch_size = 32, seed = 0):\n","    \"\"\"\n","    Creates a list of random minibatches from (X, Y)\n","    \n","    Arguments:\n","    X -- input data, of shape (input size, number of examples) (m, Hi, Wi, Ci)\n","    Y -- true \"label\" vector (containing 0 if cat, 1 if non-cat), of shape (1, number of examples) (m, n_y)\n","    mini_batch_size - size of the mini-batches, integer\n","    seed -- this is only for the purpose of grading, so that you're \"random minibatches are the same as ours.\n","    \n","    Returns:\n","    mini_batches -- list of synchronous (mini_batch_X, mini_batch_Y)\n","    \"\"\"\n","    \n","    m = X.shape[0]                  # number of training examples\n","    mini_batches = []\n","    np.random.seed(seed)\n","    \n","    # Step 1: Shuffle (X, Y)\n","    permutation = list(np.random.permutation(m))\n","    shuffled_X = X[permutation,:,:,:]\n","    shuffled_Y = Y[permutation,:]\n","\n","    # Step 2: Partition (shuffled_X, shuffled_Y). Minus the end case.\n","    num_complete_minibatches = math.floor(m/mini_batch_size) # number of mini batches of size mini_batch_size in your partitionning\n","    for k in range(0, num_complete_minibatches):\n","        mini_batch_X = shuffled_X[k * mini_batch_size : k * mini_batch_size + mini_batch_size,:,:,:]\n","        mini_batch_Y = shuffled_Y[k * mini_batch_size : k * mini_batch_size + mini_batch_size,:]\n","        mini_batch = (mini_batch_X, mini_batch_Y)\n","        mini_batches.append(mini_batch)\n","    \n","    # Handling the end case (last mini-batch < mini_batch_size)\n","    if m % mini_batch_size != 0:\n","        mini_batch_X = shuffled_X[num_complete_minibatches * mini_batch_size : m,:,:,:]\n","        mini_batch_Y = shuffled_Y[num_complete_minibatches * mini_batch_size : m,:]\n","        mini_batch = (mini_batch_X, mini_batch_Y)\n","        mini_batches.append(mini_batch)\n","    \n","    return mini_batches"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"89djPH1UNJvZ","colab_type":"code","colab":{}},"source":["# GRADED FUNCTION: create_placeholders\n","\n","def create_placeholders(n_H0, n_W0, n_C0, n_y):\n","    \"\"\"\n","    Creates the placeholders for the tensorflow session.\n","    \n","    Arguments:\n","    n_H0 -- scalar, height of an input image\n","    n_W0 -- scalar, width of an input image\n","    n_C0 -- scalar, number of channels of the input\n","    n_y -- scalar, number of classes\n","        \n","    Returns:\n","    X -- placeholder for the data input, of shape [None, n_H0, n_W0, n_C0] and dtype \"float\"\n","    Y -- placeholder for the input labels, of shape [None, n_y] and dtype \"float\"\n","    \"\"\"\n","\n","    ### START CODE HERE ### (≈2 lines)\n","    X = tf.placeholder(tf.float32, shape=(None, n_H0, n_W0, n_C0),name='X')\n","    Y = tf.placeholder(tf.float32, shape=(None, n_y),name='Y')\n","    ### END CODE HERE ###\n","    \n","    return X, Y"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ubDozOlONOfb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"outputId":"88720b5b-1a1b-44df-8ed2-dfcd6897a8a3","executionInfo":{"status":"ok","timestamp":1580704783539,"user_tz":480,"elapsed":44910,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["X, Y = create_placeholders(150, 150, 3, 6)\n","print (\"X = \" + str(X))\n","print (\"Y = \" + str(Y))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["X = Tensor(\"X:0\", shape=(?, 150, 150, 3), dtype=float32)\n","Y = Tensor(\"Y:0\", shape=(?, 6), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Uhc0a3rXNQC8","colab_type":"code","colab":{}},"source":["# GRADED FUNCTION: initialize_parameters\n","\n","def initialize_parameters():\n","    \"\"\"\n","    Initializes weight parameters to build a neural network with tensorflow. The shapes are:\n","                        W1 : [4, 4, 3, 8]\n","                        W2 : [2, 2, 8, 16]\n","    Note that we will hard code the shape values in the function to make the grading simpler.\n","    Normally, functions should take values as inputs rather than hard coding.\n","    Returns:\n","    parameters -- a dictionary of tensors containing W1, W2\n","    \"\"\"\n","    \n","    tf.set_random_seed(1)                              # so that your \"random\" numbers match ours\n","        \n","    ### START CODE HERE ### (approx. 2 lines of code)\n","    W1 = tf.get_variable(\"W1\",[4, 4, 3, 8],initializer=tf.contrib.layers.xavier_initializer(seed=0))\n","    W2 = tf.get_variable(\"W2\",[2, 2, 8, 16],initializer=tf.contrib.layers.xavier_initializer(seed=0))\n","    ### END CODE HERE ###\n","\n","    parameters = {\"W1\": W1,\n","                  \"W2\": W2}\n","    \n","    return parameters"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jAhg1u_9NWuo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":336},"outputId":"4b811e61-9cb4-4d64-c37d-262246854db7","executionInfo":{"status":"ok","timestamp":1580704793663,"user_tz":480,"elapsed":53259,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["tf.reset_default_graph()\n","with tf.Session() as sess_test:\n","    parameters = initialize_parameters()\n","    init = tf.global_variables_initializer()\n","    sess_test.run(init)\n","    print(\"W1[1,1,1] = \\n\" + str(parameters[\"W1\"].eval()[1,1,1]))\n","    print(\"W1.shape: \" + str(parameters[\"W1\"].shape))\n","    print(\"\\n\")\n","    print(\"W2[1,1,1] = \\n\" + str(parameters[\"W2\"].eval()[1,1,1]))\n","    print(\"W2.shape: \" + str(parameters[\"W2\"].shape))"],"execution_count":12,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:\n","The TensorFlow contrib module will not be included in TensorFlow 2.0.\n","For more information, please see:\n","  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n","  * https://github.com/tensorflow/addons\n","  * https://github.com/tensorflow/io (for I/O related ops)\n","If you depend on functionality not listed there, please file an issue.\n","\n","W1[1,1,1] = \n","[ 0.00131723  0.1417614  -0.04434952  0.09197326  0.14984085 -0.03514394\n"," -0.06847463  0.05245192]\n","W1.shape: (4, 4, 3, 8)\n","\n","\n","W2[1,1,1] = \n","[-0.08566415  0.17750949  0.11974221  0.16773748 -0.0830943  -0.08058\n"," -0.00577033 -0.14643836  0.24162132 -0.05857408 -0.19055021  0.1345228\n"," -0.22779644 -0.1601823  -0.16117483 -0.10286498]\n","W2.shape: (2, 2, 8, 16)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6zGYqv7HNZWD","colab_type":"code","colab":{}},"source":["def forward_propagation(X, parameters):\n","    \"\"\"\n","    Implements the forward propagation for the model:\n","    CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> FULLYCONNECTED\n","    \n","    Note that for simplicity and grading purposes, we'll hard-code some values\n","    such as the stride and kernel (filter) sizes. \n","    Normally, functions should take these values as function parameters.\n","    \n","    Arguments:\n","    X -- input dataset placeholder, of shape (input size, number of examples)\n","    parameters -- python dictionary containing your parameters \"W1\", \"W2\"\n","                  the shapes are given in initialize_parameters\n","\n","    Returns:\n","    Z3 -- the output of the last LINEAR unit\n","    \"\"\"\n","    print(\"feed forward\")\n","    # Retrieve the parameters from the dictionary \"parameters\" \n","    W1 = parameters['W1']\n","    W2 = parameters['W2']\n","    keep_prob = 0.5\n","    \n","    ### START CODE HERE ###\n","    # CONV2D: stride of 1, padding 'SAME'\n","    Z1 = tf.nn.conv2d(X,W1, strides = [1,1,1,1], padding = 'SAME')\n","    # RELU\n","    A1 = tf.nn.dropout(tf.nn.relu(Z1),keep_prob)\n","    #A1 = tf.nn.relu(Z1)\n","    # MAXPOOL: window 8x8, stride 8, padding 'SAME'\n","    P1 = tf.nn.max_pool(A1, ksize = [1,8,8,1], strides = [1,8,8,1], padding = 'SAME')\n","    # CONV2D: filters W2, stride 1, padding 'SAME'\n","    Z2 = tf.nn.conv2d(P1,W2, strides = [1,1,1,1], padding = 'SAME')\n","    # RELU\n","    A2 = tf.nn.dropout(tf.nn.relu(Z2),keep_prob)\n","    #A2 = tf.nn.relu(Z2)\n","    # MAXPOOL: window 4x4, stride 4, padding 'SAME'\n","    P2 = tf.nn.max_pool(A2, ksize = [1,4,4,1], strides = [1,4,4,1], padding = 'SAME')\n","    # FLATTEN\n","    F = tf.contrib.layers.flatten(P2)\n","    # FULLY-CONNECTED without non-linear activation function (not not call softmax).\n","    # 6 neurons in output layer. Hint: one of the arguments should be \"activation_fn=None\" \n","    Z3 = tf.contrib.layers.fully_connected(F, num_outputs=6,activation_fn=None)\n","    ### END CODE HERE ###\n","\n","    return Z3"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kMtCaBZNNf5R","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"225dd499-8cad-4d9d-8b40-4e8ad5c0b109","executionInfo":{"status":"ok","timestamp":1580704800089,"user_tz":480,"elapsed":57222,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["tf.reset_default_graph()\n","\n","with tf.Session() as sess:\n","    np.random.seed(1)\n","    X, Y = create_placeholders(150, 150, 3, 6)\n","    parameters = initialize_parameters()\n","    Z3 = forward_propagation(X, parameters)\n","    init = tf.global_variables_initializer()\n","    sess.run(init)\n","    a = sess.run(Z3, {X: np.random.randn(2,150,150,3), Y: np.random.randn(2,6)})\n","    print(\"Z3 = \\n\" + str(a))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["feed forward\n","WARNING:tensorflow:From <ipython-input-13-3afe3bc48921>:28: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/contrib/layers/python/layers/layers.py:1634: flatten (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use keras.layers.flatten instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/layers/core.py:332: Layer.apply (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `layer.__call__` method instead.\n","Z3 = \n","[[ 7.2566495   0.05751079  0.19007564  6.845881   -0.20732689 -3.3948061 ]\n"," [ 3.8431613  -2.0915372  -1.2807684   4.3233123  -0.57636356 -3.8522973 ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P9QYsyBzNiNG","colab_type":"code","colab":{}},"source":["# GRADED FUNCTION: compute_cost \n","\n","def compute_cost(Z3, Y):\n","    \"\"\"\n","    Computes the cost\n","    \n","    Arguments:\n","    Z3 -- output of forward propagation (output of the last LINEAR unit), of shape (number of examples, 6)\n","    Y -- \"true\" labels vector placeholder, same shape as Z3\n","    \n","    Returns:\n","    cost - Tensor of the cost function\n","    \"\"\"\n","    \n","    ### START CODE HERE ### (1 line of code)\n","    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = Z3, labels = Y))\n","    ### END CODE HERE ###\n","    \n","    return cost"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"v5lkOgKMNmNC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":205},"outputId":"ffc6b243-6bb8-4fb3-c5ce-0db2224cc6af","executionInfo":{"status":"ok","timestamp":1580704800240,"user_tz":480,"elapsed":55105,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["tf.reset_default_graph()\n","\n","with tf.Session() as sess:\n","    np.random.seed(1)\n","    X, Y = create_placeholders(150, 150, 3, 6)\n","    parameters = initialize_parameters()\n","    Z3 = forward_propagation(X, parameters)\n","    cost = compute_cost(Z3, Y)\n","    init = tf.global_variables_initializer()\n","    sess.run(init)\n","    a = sess.run(cost, {X: np.random.randn(4,150,150,3), Y: np.random.randn(4,6)})\n","    print(\"cost = \" + str(a))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["feed forward\n","WARNING:tensorflow:From <ipython-input-15-1365ab5e4e13>:15: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","\n","Future major versions of TensorFlow will allow gradients to flow\n","into the labels input on backprop by default.\n","\n","See `tf.nn.softmax_cross_entropy_with_logits_v2`.\n","\n","cost = -7.834238\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XpAhborxNnms","colab_type":"code","colab":{}},"source":["# GRADED FUNCTION: model\n","\n","def model(X_train, Y_train, X_test, Y_test, learning_rate = 0.009,\n","          num_epochs = 250, minibatch_size = 64, print_cost = True):\n","    \"\"\"\n","    Implements a three-layer ConvNet in Tensorflow:\n","    CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> FULLYCONNECTED\n","    \n","    Arguments:\n","    X_train -- training set, of shape (None, 64, 64, 3)\n","    Y_train -- test set, of shape (None, n_y = 6)\n","    X_test -- training set, of shape (None, 64, 64, 3)\n","    Y_test -- test set, of shape (None, n_y = 6)\n","    learning_rate -- learning rate of the optimization\n","    num_epochs -- number of epochs of the optimization loop\n","    minibatch_size -- size of a minibatch\n","    print_cost -- True to print the cost every 100 epochs\n","    \n","    Returns:\n","    train_accuracy -- real number, accuracy on the train set (X_train)\n","    test_accuracy -- real number, testing accuracy on the test set (X_test)\n","    parameters -- parameters learnt by the model. They can then be used to predict.\n","    \"\"\"\n","    \n","    ops.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables\n","    tf.set_random_seed(1)                             # to keep results consistent (tensorflow seed)\n","    seed = 3                                          # to keep results consistent (numpy seed)\n","    (m, n_H0, n_W0, n_C0) = X_train.shape             \n","    n_y = Y_train.shape[1]                            \n","    costs = []                                        # To keep track of the cost\n","    \n","    # Create Placeholders of the correct shape\n","    ### START CODE HERE ### (1 line)\n","    X, Y = create_placeholders(n_H0, n_W0, n_C0, n_y)\n","    ### END CODE HERE ###\n","\n","    # Initialize parameters\n","    ### START CODE HERE ### (1 line)\n","    parameters = initialize_parameters()\n","    ### END CODE HERE ###\n","    \n","    # Forward propagation: Build the forward propagation in the tensorflow graph\n","    ### START CODE HERE ### (1 line)\n","    Z3 = forward_propagation(X, parameters)\n","    ### END CODE HERE ###\n","    \n","    # Cost function: Add cost function to tensorflow graph\n","    ### START CODE HERE ### (1 line)\n","    cost = compute_cost(Z3, Y)\n","    ### END CODE HERE ###\n","    \n","    # Backpropagation: Define the tensorflow optimizer. Use an AdamOptimizer that minimizes the cost.\n","    ### START CODE HERE ### (1 line)\n","    optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)\n","    ### END CODE HERE ###\n","    \n","    # Initialize all the variables globally\n","    init = tf.global_variables_initializer()\n","     \n","    # Start the session to compute the tensorflow graph\n","    with tf.Session() as sess:\n","        \n","        # Run the initialization\n","        sess.run(init)\n","        \n","        # Do the training loop\n","        for epoch in range(num_epochs):\n","\n","            minibatch_cost = 0.\n","            num_minibatches = int(m / minibatch_size) # number of minibatches of size minibatch_size in the train set\n","            seed = seed + 1\n","            minibatches = random_mini_batches(X_train, Y_train, minibatch_size, seed)\n","\n","            for minibatch in minibatches:\n","\n","                # Select a minibatch\n","                (minibatch_X, minibatch_Y) = minibatch\n","                \"\"\"\n","                # IMPORTANT: The line that runs the graph on a minibatch.\n","                # Run the session to execute the optimizer and the cost.\n","                # The feedict should contain a minibatch for (X,Y).\n","                \"\"\"\n","                ### START CODE HERE ### (1 line)\n","                _ , temp_cost = sess.run(\n","                                        fetches=[optimizer, cost],\n","                                                feed_dict={X: minibatch_X,\n","                                                           Y: minibatch_Y}\n","                                                )\n","                ### END CODE HERE ###\n","                \n","                minibatch_cost += temp_cost / num_minibatches\n","                \n","\n","            # Print the cost every epoch\n","            if print_cost == True and epoch % 5 == 0:\n","                print (\"Cost after epoch %i: %f\" % (epoch, minibatch_cost))\n","            if print_cost == True and epoch % 1 == 0:\n","                costs.append(minibatch_cost)\n","        \n","        \n","        # plot the cost\n","        plt.plot(np.squeeze(costs))\n","        plt.ylabel('cost')\n","        plt.xlabel('iterations (per tens)')\n","        plt.title(\"Learning rate =\" + str(learning_rate))\n","        plt.show()\n","\n","        # Calculate the correct predictions\n","        predict_op = tf.argmax(Z3, 1)\n","        correct_prediction = tf.equal(predict_op, tf.argmax(Y, 1))\n","        \n","        # Calculate accuracy on the test set\n","        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n","        print(accuracy)\n","        train_accuracy = accuracy.eval({X: X_train, Y: Y_train})\n","        test_accuracy = accuracy.eval({X: X_test, Y: Y_test})\n","        print(\"Train Accuracy:\", train_accuracy)\n","        print(\"Test Accuracy:\", test_accuracy)\n","                \n","        return train_accuracy, test_accuracy, parameters"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PyY5jrAvNuBu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"10a0df7d-545d-4944-9ed3-a270bddba6f1","executionInfo":{"status":"error","timestamp":1580705942005,"user_tz":480,"elapsed":606183,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["np.random.seed(3)\n","\n","# Step 1: Shuffle (X, Y)\n","permutation = list(np.random.permutation(6000))\n","_, _, parameters = model(X_train[permutation,:,:,:], Y_train[permutation,:], X_test, Y_test)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["feed forward\n","Cost after epoch 0: 0.517888\n","Cost after epoch 5: 0.225567\n","Cost after epoch 10: 0.194915\n","Cost after epoch 15: 0.166528\n","Cost after epoch 20: 0.167992\n","Cost after epoch 25: 0.179223\n","Cost after epoch 30: 0.155389\n","Cost after epoch 35: 0.151962\n","Cost after epoch 40: 0.153234\n","Cost after epoch 45: 0.188715\n","Cost after epoch 50: 0.150282\n","Cost after epoch 55: 0.155369\n","Cost after epoch 60: 0.163059\n","Cost after epoch 65: 0.172045\n","Cost after epoch 70: 0.139467\n","Cost after epoch 75: 0.166248\n","Cost after epoch 80: 0.164766\n","Cost after epoch 85: 0.143644\n","Cost after epoch 90: 0.137786\n","Cost after epoch 95: 0.145413\n","Cost after epoch 100: 0.179575\n","Cost after epoch 105: 0.174940\n","Cost after epoch 110: 0.145634\n","Cost after epoch 115: 0.160950\n","Cost after epoch 120: 0.152746\n","Cost after epoch 125: 0.149419\n","Cost after epoch 130: 0.163618\n","Cost after epoch 135: 0.151588\n","Cost after epoch 140: 0.151999\n","Cost after epoch 145: 0.140158\n","Cost after epoch 150: 0.145389\n","Cost after epoch 155: 0.147931\n","Cost after epoch 160: 0.141329\n","Cost after epoch 165: 0.164462\n","Cost after epoch 170: 0.146132\n","Cost after epoch 175: 0.129947\n","Cost after epoch 180: 0.148786\n","Cost after epoch 185: 0.139673\n","Cost after epoch 190: 0.175220\n","Cost after epoch 195: 0.139846\n","Cost after epoch 200: 0.134122\n","Cost after epoch 205: 0.144349\n","Cost after epoch 210: 0.147119\n","Cost after epoch 215: 0.152079\n","Cost after epoch 220: 0.137582\n","Cost after epoch 225: 0.156279\n","Cost after epoch 230: 0.165981\n","Cost after epoch 235: 0.163903\n","Cost after epoch 240: 0.152108\n","Cost after epoch 245: 0.154662\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Tensor(\"Mean_1:0\", shape=(), dtype=float32)\n"],"name":"stdout"},{"output_type":"error","ename":"ResourceExhaustedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1364\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1365\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1366\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1349\u001b[0m       return self._call_tf_sessionrun(options, feed_dict, fetch_list,\n\u001b[0;32m-> 1350\u001b[0;31m                                       target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1351\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1442\u001b[0m                                             \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1443\u001b[0;31m                                             run_metadata)\n\u001b[0m\u001b[1;32m   1444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mResourceExhaustedError\u001b[0m: 2 root error(s) found.\n  (0) Resource exhausted: OOM when allocating tensor with shape[6000,8,150,150] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node dropout/mul_1-0-TransposeNHWCToNCHW-LayoutOptimizer}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n\n\t [[Mean_1/_17]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n\n  (1) Resource exhausted: OOM when allocating tensor with shape[6000,8,150,150] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node dropout/mul_1-0-TransposeNHWCToNCHW-LayoutOptimizer}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n\n0 successful operations.\n0 derived errors ignored.","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-46e55483fe04>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Step 1: Shuffle (X, Y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpermutation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpermutation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpermutation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpermutation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-22-34b4e3041f9e>\u001b[0m in \u001b[0;36mmodel\u001b[0;34m(X_train, Y_train, X_test, Y_test, learning_rate, num_epochs, minibatch_size, print_cost)\u001b[0m\n\u001b[1;32m    112\u001b[0m         \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrect_prediction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"float\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0mtrain_accuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m         \u001b[0mtest_accuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mY_test\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Train Accuracy:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_accuracy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, feed_dict, session)\u001b[0m\n\u001b[1;32m    796\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m     \"\"\"\n\u001b[0;32m--> 798\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_eval_using_default_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    799\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    800\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mexperimental_ref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framework/ops.py\u001b[0m in \u001b[0;36m_eval_using_default_session\u001b[0;34m(tensors, feed_dict, graph, session)\u001b[0m\n\u001b[1;32m   5405\u001b[0m                        \u001b[0;34m\"the tensor's graph is different from the session's \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5406\u001b[0m                        \"graph.\")\n\u001b[0;32m-> 5407\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    954\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    955\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 956\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    957\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    958\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1178\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1180\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1181\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1182\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1357\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1358\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1359\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1360\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1361\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                     \u001b[0;34m'\\nsession_config.graph_options.rewrite_options.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1383\u001b[0m                     'disable_meta_optimizer = True')\n\u001b[0;32m-> 1384\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode_def\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mResourceExhaustedError\u001b[0m: 2 root error(s) found.\n  (0) Resource exhausted: OOM when allocating tensor with shape[6000,8,150,150] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node dropout/mul_1-0-TransposeNHWCToNCHW-LayoutOptimizer}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n\n\t [[Mean_1/_17]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n\n  (1) Resource exhausted: OOM when allocating tensor with shape[6000,8,150,150] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node dropout/mul_1-0-TransposeNHWCToNCHW-LayoutOptimizer}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n\n0 successful operations.\n0 derived errors ignored."]}]},{"cell_type":"code","metadata":{"id":"3F8CJ2OWOAeL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"09416237-eb10-4eda-dbd2-4a5d971d69fa","executionInfo":{"status":"ok","timestamp":1580705041378,"user_tz":480,"elapsed":293047,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["cat /proc/meminfo | egrep 'MemTotal'"],"execution_count":19,"outputs":[{"output_type":"stream","text":["MemTotal:       26753328 kB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4j8DorxPOTt8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":162},"outputId":"8d931c31-13dc-4e64-a381-4a4628aa3410","executionInfo":{"status":"error","timestamp":1580702816468,"user_tz":480,"elapsed":399,"user":{"displayName":"Bharat Lakhani","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBuhrMBAy5JYTY_w0xj1f5H9-WH58tHyGHIv9hKvQ=s64","userId":"15098027997622149633"}}},"source":["Y_train"],"execution_count":71,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-71-e1e986dc1412>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mY_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpermutation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: too many indices for array"]}]},{"cell_type":"code","metadata":{"id":"kE24EoqkOta3","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}